// Weather Analysis and Advisory System
class WeatherAnalyzer {
    constructor() {
        this.currentWeather = null;
        this.forecast = null;
        this.aqi = null;
    }

    // Set weather data for analysis
    setWeatherData(current, forecast, aqi) {
        this.currentWeather = current;
        this.forecast = forecast;
        this.aqi = aqi;
    }

    // Generate health advice based on current conditions
    getHealthAdvice() {
        if (!this.currentWeather) return [];

        const advice = [];
        const temp = this.currentWeather.main.temp;
        const humidity = this.currentWeather.main.humidity;
        const uvIndex = this.getUVIndex(); // Estimate UV based on time and weather

        const lang = languageManager.getCurrentLanguage();

        // Temperature-based advice
        if (temp > 35) {
            advice.push({
                icon: 'ЁЯФе',
                title: lang === 'hi' ? 'рдЧрд░реНрдореА рдХреА рдЪреЗрддрд╛рд╡рдиреА' : 'Heat Warning',
                text: lang === 'hi' ? 
                    'рдмрд╣реБрдд рдЧрд░реНрдореА рд╣реИ! рдЫрд╛рдпрд╛ рдореЗрдВ рд░рд╣реЗрдВ, рдкрд╛рдиреА рдкрд┐рдПрдВ, рдФрд░ рдмрд╛рд╣рд░ рди рдирд┐рдХрд▓реЗрдВред' : 
                    'Extreme heat! Stay in shade, drink water, and avoid outdoor activities.'
            });
        } else if (temp < 5) {
            advice.push({
                icon: 'ЁЯе╢',
                title: lang === 'hi' ? 'рдардВрдб рдХреА рдЪреЗрддрд╛рд╡рдиреА' : 'Cold Warning',
                text: lang === 'hi' ? 
                    'рдмрд╣реБрдд рдардВрдб рд╣реИ! рдЧрд░реНрдо рдХрдкрдбрд╝реЗ рдкрд╣рдиреЗрдВ рдФрд░ рд╣рд╛рдЗрдкреЛрдерд░реНрдорд┐рдпрд╛ рд╕реЗ рдмрдЪреЗрдВред' : 
                    'Extreme cold! Wear warm clothes and prevent hypothermia.'
            });
        }

        // Humidity-based advice
        if (humidity > 80) {
            advice.push({
                icon: 'ЁЯТз',
                title: lang === 'hi' ? 'рдЙрдЪреНрдЪ рдЖрд░реНрджреНрд░рддрд╛' : 'High Humidity',
                text: lang === 'hi' ? 
                    'рдЙрдЪреНрдЪ рдЖрд░реНрджреНрд░рддрд╛ рд╣реИред рд╕реВрддреА рдХрдкрдбрд╝реЗ рдкрд╣рдиреЗрдВ рдФрд░ рд╣рд╛рдЗрдбреНрд░реЗрдЯреЗрдб рд░рд╣реЗрдВред' : 
                    'High humidity. Wear cotton clothes and stay hydrated.'
            });
        }

        // UV Index advice
        if (uvIndex > 7) {
            advice.push({
                icon: 'тШАя╕П',
                title: lang === 'hi' ? 'UV рдЪреЗрддрд╛рд╡рдиреА' : 'UV Warning',
                text: lang === 'hi' ? 
                    'рдЙрдЪреНрдЪ UV рдЗрдВрдбреЗрдХреНрд╕! рд╕рдирд╕реНрдХреНрд░реАрди рд▓рдЧрд╛рдПрдВ рдФрд░ рдзреВрдк рдХрд╛ рдЪрд╢реНрдорд╛ рдкрд╣рдиреЗрдВред' : 
                    'High UV Index! Apply sunscreen and wear sunglasses.'
            });
        }

        // AQI-based advice
        if (this.aqi && this.aqi.aqi > 100) {
            advice.push({
                icon: 'ЁЯШ╖',
                title: lang === 'hi' ? 'рд╡рд╛рдпреБ рдкреНрд░рджреВрд╖рдг' : 'Air Pollution',
                text: lang === 'hi' ? 
                    'рдЦрд░рд╛рдм рд╡рд╛рдпреБ рдЧреБрдгрд╡рддреНрддрд╛! рдорд╛рд╕реНрдХ рдкрд╣рдиреЗрдВ рдФрд░ рдШрд░ рдХреЗ рдЕрдВрджрд░ рд░рд╣реЗрдВред' : 
                    'Poor air quality! Wear a mask and stay indoors.'
            });
        }

        return advice.length > 0 ? advice : [{
            icon: 'тЬЕ',
            title: lang === 'hi' ? 'рдЕрдЪреНрдЫрд╛ рдореМрд╕рдо' : 'Good Weather',
            text: lang === 'hi' ? 
                'рдореМрд╕рдо рдЕрдЪреНрдЫрд╛ рд╣реИ! рдмрд╛рд╣рд░реА рдЧрддрд┐рд╡рд┐рдзрд┐рдпреЛрдВ рдХрд╛ рдЖрдирдВрдж рд▓реЗрдВред' : 
                'Weather is good! Enjoy outdoor activities.'
        }];
    }

    // Generate clothing recommendations
    getClothingAdvice() {
        if (!this.currentWeather) return null;

        const temp = this.currentWeather.main.temp;
        const weather = this.currentWeather.weather[0].main.toLowerCase();
        const lang = languageManager.getCurrentLanguage();

        let advice = {
            icon: 'ЁЯСХ',
            title: lang === 'hi' ? 'рдХрдкрдбрд╝реЛрдВ рдХреА рд╕рд▓рд╛рд╣' : 'Clothing Advice',
            text: '',
            items: []
        };

        // Temperature-based clothing
        if (temp > 30) {
            advice.items = lang === 'hi' ? 
                ['рд╣рд▓реНрдХреЗ рд░рдВрдЧ рдХреЗ рдХрдкрдбрд╝реЗ', 'рд╕реВрддреА рдХрдкрдбрд╝реЗ', 'рдЯреЛрдкреА', 'рдзреВрдк рдХрд╛ рдЪрд╢реНрдорд╛'] :
                ['Light colored clothes', 'Cotton fabrics', 'Hat', 'Sunglasses'];
        } else if (temp > 20) {
            advice.items = lang === 'hi' ? 
                ['рдЖрд░рд╛рдорджрд╛рдпрдХ рдХрдкрдбрд╝реЗ', 'рдЬреИрдХреЗрдЯ (рд╢рд╛рдо рдХреЗ рд▓рд┐рдП)', 'рд╕реНрдиреАрдХрд░реНрд╕'] :
                ['Comfortable clothes', 'Light jacket (for evening)', 'Sneakers'];
        } else if (temp > 10) {
            advice.items = lang === 'hi' ? 
                ['рдЬреИрдХреЗрдЯ', 'рд▓рдВрдмреА рдкреИрдВрдЯ', 'рдмрдВрдж рдЬреВрддреЗ', 'рд╕реНрд╡реЗрдЯрд░'] :
                ['Jacket', 'Long pants', 'Closed shoes', 'Sweater'];
        } else {
            advice.items = lang === 'hi' ? 
                ['рднрд╛рд░реА рдХреЛрдЯ', 'рдЧрд░реНрдо рдХрдкрдбрд╝реЗ', 'рджрд╕реНрддрд╛рдиреЗ', 'рдЯреЛрдкреА', 'рдмреВрдЯреНрд╕'] :
                ['Heavy coat', 'Warm clothes', 'Gloves', 'Beanie', 'Boots'];
        }

        // Weather-specific additions
        if (weather.includes('rain')) {
            advice.items.push(lang === 'hi' ? 'рдЫрд╛рддрд╛' : 'Umbrella');
            advice.items.push(lang === 'hi' ? 'рд░реЗрдирдХреЛрдЯ' : 'Raincoat');
        }

        if (weather.includes('snow')) {
            advice.items.push(lang === 'hi' ? 'рд╡рд╛рдЯрд░рдкреНрд░реВрдл рдЬреВрддреЗ' : 'Waterproof boots');
            advice.items.push(lang === 'hi' ? 'рдЧрд░реНрдо рдореЛрдЬрд╝реЗ' : 'Warm socks');
        }

        advice.text = advice.items.join(', ');
        return advice;
    }

    // Analyze weather for travel planning
    getTravelAdvice() {
        if (!this.forecast) return null;

        const lang = languageManager.getCurrentLanguage();
        const days = this.forecast.list.slice(0, 5); // Next 5 days
        const recommendations = [];

        days.forEach((day, index) => {
            const date = new Date(day.dt * 1000);
            const temp = day.main.temp;
            const weather = day.weather[0].main.toLowerCase();
            const rain = day.rain ? day.rain['3h'] || 0 : 0;

            let score = 10; // Perfect score
            let activities = [];
            let warnings = [];

            // Score based on temperature
            if (temp >= 20 && temp <= 28) {
                score += 2; // Perfect temperature
            } else if (temp >= 15 && temp <= 35) {
                score -= 1; // Acceptable
            } else {
                score -= 3; // Not ideal
            }

            // Score based on weather conditions
            if (weather === 'clear') {
                score += 2;
                activities.push(lang === 'hi' ? 'рдкрд┐рдХрдирд┐рдХ' : 'Picnic');
                activities.push(lang === 'hi' ? 'рдЯреНрд░реЗрдХрд┐рдВрдЧ' : 'Hiking');
            } else if (weather === 'clouds') {
                score += 0;
                activities.push(lang === 'hi' ? 'рд╕реИрд░' : 'Walking');
            } else if (weather === 'rain') {
                score -= 2;
                warnings.push(lang === 'hi' ? 'рдмрд╛рд░рд┐рд╢ рд╣реЛ рд╕рдХрддреА рд╣реИ' : 'Rain expected');
                activities.push(lang === 'hi' ? 'рдореНрдпреВрдЬрд┐рдпрдо' : 'Museums');
            }

            // Score based on rain
            if (rain > 5) {
                score -= 2;
            }

            recommendations.push({
                date: date.toLocaleDateString(lang === 'hi' ? 'hi-IN' : 'en-US', { 
                    weekday: 'short', 
                    month: 'short', 
                    day: 'numeric' 
                }),
                score: Math.max(0, Math.min(10, score)),
                temp: Math.round(temp),
                weather: weather,
                activities: activities,
                warnings: warnings,
                recommendation: this.getScoreText(score, lang)
            });
        });

        return recommendations;
    }

    // Get farmer-specific advice
    getFarmerAdvice() {
        if (!this.currentWeather || !this.forecast) return null;

        const lang = languageManager.getCurrentLanguage();
        const temp = this.currentWeather.main.temp;
        const humidity = this.currentWeather.main.humidity;
        const windSpeed = this.currentWeather.wind.speed;
        
        // Calculate expected rainfall from forecast
        let expectedRain = 0;
        this.forecast.list.slice(0, 8).forEach(item => { // Next 24 hours
            if (item.rain) {
                expectedRain += item.rain['3h'] || 0;
            }
        });

        const advice = [];

        // Temperature advice
        if (temp > 35) {
            advice.push({
                icon: 'ЁЯМбя╕П',
                category: lang === 'hi' ? 'рддрд╛рдкрдорд╛рди рдЪреЗрддрд╛рд╡рдиреА' : 'Temperature Alert',
                text: lang === 'hi' ? 
                    'рдмрд╣реБрдд рдЧрд░реНрдореА рд╣реИред рдлрд╕рд▓реЛрдВ рдХреЛ рдЕрдзрд┐рдХ рдкрд╛рдиреА рджреЗрдВ рдФрд░ рджреЛрдкрд╣рд░ рдореЗрдВ рдХрд╛рдо рди рдХрд░реЗрдВред' :
                    'Very hot weather. Water crops more and avoid working in afternoon.'
            });
        } else if (temp < 5) {
            advice.push({
                icon: 'тЭДя╕П',
                category: lang === 'hi' ? 'рдардВрдб рдЪреЗрддрд╛рд╡рдиреА' : 'Cold Alert',
                text: lang === 'hi' ? 
                    'рдкрд╛рд▓рд╛ рдкрдбрд╝ рд╕рдХрддрд╛ рд╣реИред рдлрд╕рд▓реЛрдВ рдХреЛ рдврдХреЗрдВ рдФрд░ рдкрд╛рдиреА рдЫрд┐рдбрд╝рдХреЗрдВред' :
                    'Frost possible. Cover crops and sprinkle water for protection.'
            });
        }

        // Rainfall advice
        if (expectedRain > 10) {
            advice.push({
                icon: 'ЁЯМзя╕П',
                category: lang === 'hi' ? 'рдмрд╛рд░рд┐рд╢ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди' : 'Rain Forecast',
                text: lang === 'hi' ? 
                    `рдЕрдЧрд▓реЗ 24 рдШрдВрдЯреЛрдВ рдореЗрдВ ${expectedRain.toFixed(1)}mm рдмрд╛рд░рд┐рд╢ рд╕рдВрднрд╛рд╡рд┐рдд рд╣реИред рдЦреЗрдд рдХреА рдЬрд▓ рдирд┐рдХрд╛рд╕реА рдЬрд╛рдВрдЪреЗрдВред` :
                    `${expectedRain.toFixed(1)}mm rain expected in next 24 hours. Check field drainage.`
            });
        } else if (expectedRain < 1 && humidity < 40) {
            advice.push({
                icon: 'ЁЯТз',
                category: lang === 'hi' ? 'рд╕рд┐рдВрдЪрд╛рдИ рд╕рд▓рд╛рд╣' : 'Irrigation Advice',
                text: lang === 'hi' ? 
                    'рд╕реВрдЦрд╛ рдореМрд╕рдо рд╣реИред рдлрд╕рд▓реЛрдВ рдХреА рд╕рд┐рдВрдЪрд╛рдИ рдХрд░реЗрдВ рдФрд░ рдорд┐рдЯреНрдЯреА рдХреА рдирдореА рдЬрд╛рдВрдЪреЗрдВред' :
                    'Dry weather ahead. Irrigate crops and check soil moisture.'
            });
        }

        // Wind advice
        if (windSpeed > 10) {
            advice.push({
                icon: 'ЁЯТи',
                category: lang === 'hi' ? 'рд╣рд╡рд╛ рдЪреЗрддрд╛рд╡рдиреА' : 'Wind Alert',
                text: lang === 'hi' ? 
                    'рддреЗрдЬрд╝ рд╣рд╡рд╛ рдЪрд▓ рд░рд╣реА рд╣реИред рдХрдордЬреЛрд░ рдкреМрдзреЛрдВ рдХреЛ рд╕рд╣рд╛рд░рд╛ рджреЗрдВред' :
                    'Strong winds. Provide support to weak plants.'
            });
        }

        return advice;
    }

    // Generate weather alerts
    getWeatherAlerts() {
        if (!this.currentWeather) return [];

        const alerts = [];
        const temp = this.currentWeather.main.temp;
        const weather = this.currentWeather.weather[0].main.toLowerCase();
        const lang = languageManager.getCurrentLanguage();

        // Extreme temperature alerts
        if (temp > 40) {
            alerts.push({
                level: 'danger',
                icon: 'ЁЯФе',
                title: lang === 'hi' ? 'рдЧрдВрднреАрд░ рдЧрд░реНрдореА рдЪреЗрддрд╛рд╡рдиреА' : 'Severe Heat Warning',
                message: lang === 'hi' ? 
                    'рдмрд╣реБрдд рдЦрддрд░рдирд╛рдХ рдЧрд░реНрдореА! рддреБрд░рдВрдд рдардВрдбреА рдЬрдЧрд╣ рдЬрд╛рдПрдВред' :
                    'Dangerous heat levels! Seek immediate shelter.'
            });
        } else if (temp < 0) {
            alerts.push({
                level: 'danger',
                icon: 'ЁЯе╢',
                title: lang === 'hi' ? 'рдЧрдВрднреАрд░ рдардВрдб рдЪреЗрддрд╛рд╡рдиреА' : 'Severe Cold Warning',
                message: lang === 'hi' ? 
                    'рд╣рд┐рдореАрдХрд░рдг рдХрд╛ рдЦрддрд░рд╛! рдЧрд░реНрдо рдХрдкрдбрд╝реЗ рдкрд╣рдиреЗрдВред' :
                    'Freezing temperatures! Wear warm clothing.'
            });
        }

        // Storm alerts
        if (weather === 'thunderstorm') {
            alerts.push({
                level: 'warning',
                icon: 'тЫИя╕П',
                title: lang === 'hi' ? 'рддреВрдлрд╛рди рдЪреЗрддрд╛рд╡рдиреА' : 'Storm Warning',
                message: lang === 'hi' ? 
                    'рдЧрд░рдЬ-рдЪрдордХ рдХреЗ рд╕рд╛рде рдмрд╛рд░рд┐рд╢ред рдШрд░ рдХреЗ рдЕрдВрджрд░ рд░рд╣реЗрдВред' :
                    'Thunderstorm activity. Stay indoors.'
            });
        }

        return alerts;
    }

    // Helper methods
    getUVIndex() {
        // Simplified UV calculation based on time and weather
        const hour = new Date().getHours();
        const weather = this.currentWeather.weather[0].main.toLowerCase();
        
        let uvIndex = 0;
        if (hour >= 10 && hour <= 16) {
            uvIndex = weather === 'clear' ? 8 : weather === 'clouds' ? 5 : 3;
        } else if (hour >= 8 && hour <= 18) {
            uvIndex = weather === 'clear' ? 5 : weather === 'clouds' ? 3 : 1;
        }
        
        return uvIndex;
    }

    getScoreText(score, lang) {
        if (score >= 8) {
            return lang === 'hi' ? 'рдмрд╣реБрдд рдЕрдЪреНрдЫрд╛' : 'Excellent';
        } else if (score >= 6) {
            return lang === 'hi' ? 'рдЕрдЪреНрдЫрд╛' : 'Good';
        } else if (score >= 4) {
            return lang === 'hi' ? 'рдареАрдХ' : 'Fair';
        } else {
            return lang === 'hi' ? 'рдЦрд░рд╛рдм' : 'Poor';
        }
    }
}

// Chat Assistant for Natural Language Queries
class WeatherChatAssistant {
    constructor() {
        this.weatherAnalyzer = null;
        this.responses = this.initializeResponses();
    }

    // Set weather analyzer reference
    setWeatherAnalyzer(analyzer) {
        this.weatherAnalyzer = analyzer;
    }

    // Initialize response patterns
    initializeResponses() {
        return {
            en: {
                greeting: [
                    "Hello! I'm your weather assistant. Ask me about weather conditions!",
                    "Hi there! What would you like to know about the weather?",
                    "Welcome! I can help you with weather information and advice."
                ],
                temperature: [
                    "The current temperature is {temp}┬░C.",
                    "It's {temp}┬░C right now.",
                    "Temperature is currently {temp}┬░C."
                ],
                rain: [
                    "Rain is {status} today.",
                    "Rainfall chances are {status}.",
                    "It's {status} to rain today."
                ],
                advice: [
                    "Based on current conditions, I recommend: {advice}",
                    "Here's my advice: {advice}",
                    "Consider this: {advice}"
                ],
                error: [
                    "I'm sorry, I don't understand that question.",
                    "Could you please rephrase your question?",
                    "I can help with weather-related questions."
                ]
            },
            hi: {
                greeting: [
                    "рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ рдореМрд╕рдо рд╕рд╣рд╛рдпрдХ рд╣реВрдВред рдореБрдЭрд╕реЗ рдореМрд╕рдо рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫреЗрдВ!",
                    "рд╣реИрд▓реЛ! рдЖрдк рдореМрд╕рдо рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдХреНрдпрд╛ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?",
                    "рд╕реНрд╡рд╛рдЧрдд рд╣реИ! рдореИрдВ рдЖрдкрдХреЛ рдореМрд╕рдо рдХреА рдЬрд╛рдирдХрд╛рд░реА рджреЗ рд╕рдХрддрд╛ рд╣реВрдВред"
                ],
                temperature: [
                    "рд╡рд░реНрддрдорд╛рди рддрд╛рдкрдорд╛рди {temp}┬░C рд╣реИред",
                    "рдЕрднреА {temp}┬░C рддрд╛рдкрдорд╛рди рд╣реИред",
                    "рддрд╛рдкрдорд╛рди рдЕрднреА {temp}┬░C рд╣реИред"
                ],
                rain: [
                    "рдЖрдЬ рдмрд╛рд░рд┐рд╢ {status} рд╣реИред",
                    "рдмрд╛рд░рд┐рд╢ рдХреА рд╕рдВрднрд╛рд╡рдирд╛ {status} рд╣реИред",
                    "рдЖрдЬ рдмрд╛рд░рд┐рд╢ {status}ред"
                ],
                advice: [
                    "рдореМрдЬреВрджрд╛ рд╕реНрдерд┐рддрд┐ рдХреЗ рдЖрдзрд╛рд░ рдкрд░, рдореИрдВ рд╕реБрдЭрд╛рддрд╛ рд╣реВрдВ: {advice}",
                    "рдпрд╣рд╛рдВ рдореЗрд░реА рд╕рд▓рд╛рд╣ рд╣реИ: {advice}",
                    "рдЗрд╕ рдкрд░ рд╡рд┐рдЪрд╛рд░ рдХрд░реЗрдВ: {advice}"
                ],
                error: [
                    "рдорд╛рдлрд╝ рдХрд░реЗрдВ, рдореИрдВ рдпрд╣ рд╕рд╡рд╛рд▓ рдирд╣реАрдВ рд╕рдордЭ рдкрд╛рдпрд╛ред",
                    "рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рд╕рд╡рд╛рд▓ рджреЛрдмрд╛рд░рд╛ рдкреВрдЫреЗрдВред",
                    "рдореИрдВ рдореМрд╕рдо рд╕рдВрдмрдВрдзреА рд╕рд╡рд╛рд▓реЛрдВ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВред"
                ]
            }
        };
    }

    // Process user query and return response
    processQuery(query) {
        const lang = languageManager.getCurrentLanguage();
        const lowerQuery = query.toLowerCase();
        
        // Check for greeting
        if (this.isGreeting(lowerQuery)) {
            return this.getRandomResponse('greeting', lang);
        }

        // Check for temperature queries
        if (this.isTemperatureQuery(lowerQuery)) {
            return this.getTemperatureResponse(lang);
        }

        // Check for rain queries
        if (this.isRainQuery(lowerQuery)) {
            return this.getRainResponse(lang);
        }

        // Check for advice queries
        if (this.isAdviceQuery(lowerQuery)) {
            return this.getAdviceResponse(lang);
        }

        // Default response
        return this.getRandomResponse('error', lang);
    }

    // Helper methods for query detection
    isGreeting(query) {
        const greetings = ['hello', 'hi', 'hey', 'good morning', 'good afternoon', 'namaste', 'namaskar'];
        return greetings.some(greeting => query.includes(greeting));
    }

    isTemperatureQuery(query) {
        const tempKeywords = ['temperature', 'temp', 'hot', 'cold', 'degrees', 'celsius', 'рддрд╛рдкрдорд╛рди', 'рдЧрд░реНрдореА', 'рдардВрдб'];
        return tempKeywords.some(keyword => query.includes(keyword));
    }

    isRainQuery(query) {
        const rainKeywords = ['rain', 'raining', 'precipitation', 'shower', 'wet', 'рдмрд╛рд░рд┐рд╢', 'рдмрд░рд╕рд╛рдд', 'рдкрд╛рдиреА'];
        return rainKeywords.some(keyword => query.includes(keyword));
    }

    isAdviceQuery(query) {
        const adviceKeywords = ['advice', 'recommend', 'should', 'wear', 'clothing', 'рд╕рд▓рд╛рд╣', 'рд╕реБрдЭрд╛рд╡', 'рдХреНрдпрд╛ рдкрд╣рдиреЗрдВ'];
        return adviceKeywords.some(keyword => query.includes(keyword));
    }

    // Response generators
    getTemperatureResponse(lang) {
        if (!this.weatherAnalyzer || !this.weatherAnalyzer.currentWeather) {
            return lang === 'hi' ? 'рддрд╛рдкрдорд╛рди рдХреА рдЬрд╛рдирдХрд╛рд░реА рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред' : 'Temperature information not available.';
        }

        const temp = Math.round(this.weatherAnalyzer.currentWeather.main.temp);
        const template = this.getRandomResponse('temperature', lang);
        return template.replace('{temp}', temp);
    }

    getRainResponse(lang) {
        if (!this.weatherAnalyzer || !this.weatherAnalyzer.currentWeather) {
            return lang === 'hi' ? 'рдмрд╛рд░рд┐рд╢ рдХреА рдЬрд╛рдирдХрд╛рд░реА рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред' : 'Rain information not available.';
        }

        const weather = this.weatherAnalyzer.currentWeather.weather[0].main.toLowerCase();
        let status;
        
        if (weather.includes('rain')) {
            status = lang === 'hi' ? 'рд╣реЛ рд░рд╣реА' : 'expected';
        } else if (weather.includes('cloud')) {
            status = lang === 'hi' ? 'рд╕рдВрднрд╛рд╡рд┐рдд' : 'possible';
        } else {
            status = lang === 'hi' ? 'рдирд╣реАрдВ рд╣реЛрдЧреА' : 'not expected';
        }

        const template = this.getRandomResponse('rain', lang);
        return template.replace('{status}', status);
    }

    getAdviceResponse(lang) {
        if (!this.weatherAnalyzer) {
            return lang === 'hi' ? 'рд╕рд▓рд╛рд╣ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред' : 'Advice not available.';
        }

        const clothingAdvice = this.weatherAnalyzer.getClothingAdvice();
        if (clothingAdvice && clothingAdvice.items.length > 0) {
            const advice = clothingAdvice.items.slice(0, 2).join(' рдФрд░ ');
            const template = this.getRandomResponse('advice', lang);
            return template.replace('{advice}', advice);
        }

        return lang === 'hi' ? 'рдореМрд╕рдо рдЕрдЪреНрдЫрд╛ рд╣реИред' : 'Weather is good.';
    }

    getRandomResponse(type, lang) {
        const responses = this.responses[lang][type];
        return responses[Math.floor(Math.random() * responses.length)];
    }
}

// Initialize global analyzer and chat assistant
window.weatherAnalyzer = new WeatherAnalyzer();
window.weatherChatAssistant = new WeatherChatAssistant();
window.weatherChatAssistant.setWeatherAnalyzer(window.weatherAnalyzer);
